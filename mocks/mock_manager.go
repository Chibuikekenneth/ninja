// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tonyalaribe/ninja/core (interfaces: Manager)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	datalayer "github.com/tonyalaribe/ninja/datalayer"
	reflect "reflect"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// CreateCollection mocks base method
func (m *MockManager) CreateCollection(arg0 string, arg1, arg2 map[string]interface{}) error {
	ret := m.ctrl.Call(m, "CreateCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCollection indicates an expected call of CreateCollection
func (mr *MockManagerMockRecorder) CreateCollection(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollection", reflect.TypeOf((*MockManager)(nil).CreateCollection), arg0, arg1, arg2)
}

// GetItem mocks base method
func (m *MockManager) GetItem(arg0, arg1 string) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetItem", arg0, arg1)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem
func (mr *MockManagerMockRecorder) GetItem(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockManager)(nil).GetItem), arg0, arg1)
}

// GetItems mocks base method
func (m *MockManager) GetItems(arg0 string, arg1 datalayer.QueryMeta) ([]map[string]interface{}, datalayer.ItemsResponseInfo, error) {
	ret := m.ctrl.Call(m, "GetItems", arg0, arg1)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(datalayer.ItemsResponseInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetItems indicates an expected call of GetItems
func (mr *MockManagerMockRecorder) GetItems(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockManager)(nil).GetItems), arg0, arg1)
}

// GetSchema mocks base method
func (m *MockManager) GetSchema(arg0 string) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetSchema", arg0)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchema indicates an expected call of GetSchema
func (mr *MockManagerMockRecorder) GetSchema(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchema", reflect.TypeOf((*MockManager)(nil).GetSchema), arg0)
}

// SaveItem mocks base method
func (m *MockManager) SaveItem(arg0 string, arg1 map[string]interface{}) error {
	ret := m.ctrl.Call(m, "SaveItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveItem indicates an expected call of SaveItem
func (mr *MockManagerMockRecorder) SaveItem(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveItem", reflect.TypeOf((*MockManager)(nil).SaveItem), arg0, arg1)
}
